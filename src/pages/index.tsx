import type { NextPage } from "next";
import Head from "next/head";

import { useAccount, useConnect, useSignMessage, useDisconnect } from 'wagmi';
import { InjectedConnector } from 'wagmi/connectors/injected';
import { useRouter } from 'next/router';
import { signIn } from 'next-auth/react';
import axios from 'axios';

const Home: NextPage = () => {
  const { connectAsync } = useConnect();
  const { disconnectAsync } = useDisconnect();
  const { isConnected } = useAccount();
  const { signMessageAsync } = useSignMessage();
  const { push } = useRouter();

  const handleAuth = async () => {
      //disconnects the web3 provider if it's already active
      if (isConnected) {
          await disconnectAsync();
      }
      // enabling the web3 provider metamask
      const { account, chain } = await connectAsync({ connector: new InjectedConnector() });

      const userData = { address: account, chain: chain.id, network: 'evm' };
      // making a post request to our 'request-message' endpoint
      const { data } = await axios.post('/api/auth/request-message', userData, {
          headers: {
              'content-type': 'application/json',
          },
      });
      const message = data.message;
      // signing the received message via metamask
      const signature = await signMessageAsync({ message });

      // redirect user after success authentication to '/user' page
      const { url } = await signIn('credentials', { message, signature, redirect: false, callbackUrl: '/user' });
      /**
       * instead of using signIn(..., redirect: "/user")
       * we get the url from callback and push it to the router to avoid page refreshing
       */
      push(url);
  };

  return (
    <>
      <Head>
        <title>Web3 Transact</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="container mx-auto flex flex-col items-center justify-center min-h-screen p-4">
        <h1 className="text-5xl md:text-[5rem] leading-normal font-extrabold text-gray-700">
          Web3 <span className="text-purple-500">Transact</span>
        </h1>
        <p className="text-2xl text-gray-700">{`Let's see what you've been upto Web3:`}</p>
        <div className="mt-12">
          <button
            className="flex w-full items-center justify-center rounded-md border border-transparent bg-indigo-600 px-8 py-3 text-base font-medium text-white hover:bg-indigo-700 md:py-4 md:px-10 md:text-lg"
            onClick={() => handleAuth()}>Connect Wallet</button>
        </div>
      </main>
    </>
  );
};

export default Home;

type TechnologyCardProps = {
  name: string;
  description: string;
  documentation: string;
};

const TechnologyCard = ({
  name,
  description,
  documentation,
}: TechnologyCardProps) => {
  return (
    <section className="flex flex-col justify-center p-6 duration-500 border-2 border-gray-500 rounded shadow-xl motion-safe:hover:scale-105">
      <h2 className="text-lg text-gray-700">{name}</h2>
      <p className="text-sm text-gray-600">{description}</p>
      <a
        className="mt-3 text-sm underline text-violet-500 decoration-dotted underline-offset-2"
        href={documentation}
        target="_blank"
        rel="noreferrer"
      >
        Documentation
      </a>
    </section>
  );
};
